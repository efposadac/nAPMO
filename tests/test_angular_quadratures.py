# file: test_angular_quadratures.py
# nAPMO package
# Copyright (c) 2014, Edwin Fernando Posada
# All rights reserved.
# Version: 0.1
# efposadac@sissa.it

import napmo.utilities.angular_quadratures as nint
import numpy as np


def test_angular_quadratures_lebedev():

    _t = np.array([
                    1.57079633, 1.57079633, 1.57079633, 1.57079633, 0.00000000, 3.14159265,
                    0.95531663, 2.18627602, 0.95531663, 2.18627602, 0.95531663, 2.18627602,
                    0.95531663, 2.18627602, 0.26487957, 2.87671305, 0.26487957, 2.87671305,
                    0.26487957, 2.87671305, 0.26487957, 2.87671305, 1.38460675, 1.38460675,
                    1.75698591, 1.75698591, 1.38460675, 1.38460675, 1.75698591, 1.75698591,
                    1.38460675, 1.38460675, 1.75698591, 1.75698591, 1.38460675, 1.38460675,
                    1.75698591, 1.75698591, 1.35312419, 1.78846847, 1.35312419, 1.78846847,
                    1.35312419, 1.78846847, 1.35312419, 1.78846847, 0.80872539, 0.80872539,
                    2.33286733, 2.33286733, 0.80872539, 0.80872539, 2.33286733, 2.33286733,
                    0.80872539, 0.80872539, 2.33286733, 2.33286733, 0.80872539, 0.80872539,
                    2.33286733, 2.33286733, 0.59389032, 2.54770240, 0.59389032, 2.5477024,
                    0.59389032, 2.54770240, 0.59389032, 2.54770240, 1.16397783, 1.16397783,
                    1.97761482, 1.97761482, 1.16397783, 1.16397783, 1.97761482, 1.97761482,
                    1.16397783, 1.16397783, 1.97761482, 1.97761482, 1.16397783, 1.16397783,
                    1.97761482, 1.97761482, 1.57079633, 1.57079633, 1.57079633, 1.57079633,
                    1.57079633, 1.57079633, 1.57079633, 1.57079633, 0.49879652, 2.64279616,
                    0.49879652, 2.64279616, 1.07199984, 2.06959282, 1.07199984, 2.06959282,
                    0.49879652, 2.64279616, 0.49879652, 2.64279616, 1.07199984, 2.06959282,
                    1.07199984, 2.06959282], dtype=np.float64)

    _p = np.array([
                    0.00000000, 3.14159265, 1.57079633, -1.57079633, 1.57079633, 1.57079633,
                    0.78539816, 0.78539816, -0.78539816, -0.78539816, 2.35619449, 2.35619449,
                    -2.35619449, -2.35619449, 0.78539816, 0.78539816, -0.78539816, -0.78539816,
                    2.35619449, 2.35619449, -2.35619449, -2.35619449, 1.38129284, -1.38129284,
                    1.38129284, -1.38129284, 1.76029981, -1.76029981, 1.76029981, -1.76029981,
                    0.1895035, 2.95208903, 0.1895035, 2.95208903, -0.1895035, -2.95208903,
                    -0.1895035, -2.95208903, 0.78539816, 0.78539816, -0.78539816, -0.78539816,
                    2.35619449, 2.35619449, -2.35619449, -2.35619449, 0.30314969, -0.30314969,
                    0.30314969, -0.30314969, 2.8384429, -2.8384429, 2.8384429, -2.8384429,
                    1.26764657, 1.87394608, 1.26764657, 1.87394608, -1.26764657, -1.87394608,
                    -1.26764657, -1.87394608, 0.78539816, 0.78539816, -0.78539816, -0.78539816,
                    2.35619449, 2.35619449, -2.35619449, -2.35619449, 1.1253576, -1.1253576,
                    1.1253576, -1.1253576, 2.01623505, -2.01623505, 2.01623505, -2.01623505,
                    0.44543879, 2.69615393, 0.44543879, 2.69615393, -0.44543879, -2.69615393,
                    -0.44543879, -2.69615393, 1.07199984, -1.07199984, 2.06959282, -2.06959282,
                    0.49879652, -0.49879652, 2.64279616, -2.64279616, 0.00000000, 0.00000000,
                    3.14159265, 3.14159265, 0.00000000, 0.00000000, 3.14159265, 3.14159265,
                    1.57079633, 1.57079633, -1.57079633, -1.57079633, 1.57079633, 1.57079633,
                    -1.57079633, -1.57079633], dtype=np.float64)

    _w = np.array([
                    0.003828270594, 0.003828270594, 0.003828270594, 0.003828270594,
                    0.003828270594, 0.003828270594, 0.009793737903, 0.009793737903,
                    0.009793737903, 0.009793737903, 0.009793737903, 0.009793737903,
                    0.009793737903, 0.009793737903, 0.008211737499, 0.008211737499,
                    0.008211737499, 0.008211737499, 0.008211737499, 0.008211737499,
                    0.008211737499, 0.008211737499, 0.008211737499, 0.008211737499,
                    0.008211737499, 0.008211737499, 0.008211737499, 0.008211737499,
                    0.008211737499, 0.008211737499, 0.008211737499, 0.008211737499,
                    0.008211737499, 0.008211737499, 0.008211737499, 0.008211737499,
                    0.008211737499, 0.008211737499, 0.009942814708, 0.009942814708,
                    0.009942814708, 0.009942814708, 0.009942814708, 0.009942814708,
                    0.009942814708, 0.009942814708, 0.009942814708, 0.009942814708,
                    0.009942814708, 0.009942814708, 0.009942814708, 0.009942814708,
                    0.009942814708, 0.009942814708, 0.009942814708, 0.009942814708,
                    0.009942814708, 0.009942814708, 0.009942814708, 0.009942814708,
                    0.009942814708, 0.009942814708, 0.009595471434, 0.009595471434,
                    0.009595471434, 0.009595471434, 0.009595471434, 0.009595471434,
                    0.009595471434, 0.009595471434, 0.009595471434, 0.009595471434,
                    0.009595471434, 0.009595471434, 0.009595471434, 0.009595471434,
                    0.009595471434, 0.009595471434, 0.009595471434, 0.009595471434,
                    0.009595471434, 0.009595471434, 0.009595471434, 0.009595471434,
                    0.009595471434, 0.009595471434, 0.00969499629,  0.00969499629,
                    0.00969499629,  0.00969499629,  0.00969499629,  0.00969499629,
                    0.00969499629,  0.00969499629,  0.00969499629,  0.00969499629,
                    0.00969499629,  0.00969499629,  0.00969499629,  0.00969499629,
                    0.00969499629,  0.00969499629,  0.00969499629,  0.00969499629,
                    0.00969499629,  0.00969499629,  0.00969499629,  0.00969499629,
                    0.00969499629,  0.00969499629], dtype=np.float64)

    t, p, w = nint.lebedev(110)

    np.testing.assert_allclose(t, _t)
    np.testing.assert_allclose(p, _p)
    np.testing.assert_allclose(w, _w)

    try:
        t, p, w = nint.lebedev(100)
        assert False, 'Expecting Failure!'
    except ValueError:
        assert True


def test_angular_quadratures_lebedev_get_order():
    assert nint.lebedev_get_order(110) == 17

    try:
        a = nint.lebedev_get_order(2)
        assert False, 'Expecting Failure!'
    except:
        assert True

# test_angular_quadratures_lebedev()
# test_angular_quadratures_lebedev_get_order()
